worker_processes auto; # ワーカープロセス数を自動設定

# TODO:ファイルディスクリプタの上限値: cat /proc/sys/fs/file-max
# TODO:ワーカープロセス数: top -p $(pgrep -d',' nginx)
# TODO:worker_rlimit_nofile = ファイルディスクリプタの上限値/ワーカープロセス数 *0.9
# TODO:worker_connections = worker_rlimit_nofile/4 以下

worker_rlimit_nofile 100000; # 各ワーカープロセスに許可される最大ファイルディスクリプタ数
events {
	worker_connections 4096; # 各ワーカープロセスの同時接続最大数
	multi_accept on; # 新しい接続要求があるたびに複数の接続を一度に受け入れる（エラーがでるリスクあり）
	use epoll; # 高パフォーマンスのためのイベントモデル(epoll)を使用
}

http {
	server_tokens off; # レスポンスヘッダーにNginxのバージョン情報を含まない
	sendfile on;
	tcp_nopush on; # レスポンスヘッダとファイルの内容をまとめて送信。パケット数を減らせる。
	tcp_nodelay on; # データをキャッシュせず送信させる。ユーザーレスポンスが良くなる場合もあるが、ネットワーク負荷が高くなる。

	client_max_body_size 100M; # リクエストボディの最大許容サイズ。大きな画像などを扱う場合は大きくする。
	client_header_timeout 10; # クライアントヘッダの読み取りタイムアウト（秒）
	client_body_timeout 10; # クライアントボディの読み取りタイムアウト（秒）

	gzip on; # cpu 使うのでメリット・デメリット見極める必要あり。gzip_static 使えるなら事前にgzip圧縮した上でそちらを使う。
	gzip_vary on;
	gzip_types
	text/plain
	text/css
	text/js
	text/xml
	text/javascript
	application/javascript
	application/x-javascript
	application/json
	application/xml
	application/xml+rss;
	gzip_proxied any;
	gzip_disable "msie6"; # IE6 に対してGzip圧縮を無効にする（古いブラウザ対策）
	gzip_min_length 1024;
	gzip_comp_level 6;

	keepalive_timeout 65; # keepalive（同一クライアントからのコネクションを再利用）のタイムアウト時間
	keepalive_requests 10000; # 1つの接続で処理できるリクエストの最大数

	open_file_cache max=100 inactive=20s; # 開いたファイルのキャッシュ設定。20秒間アクセスがないものはキャッシュから削除。
	open_file_cache_valid 30s; # キャッシュデータの有効期限
	open_file_cache_min_uses 2; # この回数未満のアクセスではキャッシュを保持しない
	open_file_cache_errors on; # ファイルの開く際のエラー情報もキャッシュする

	types_hash_max_size 2048; # MIMEタイプハッシュテーブルのサイズ。大きな設定で数値を増やす必要がある場合に調整。

	log_format ltsv "time:$time_local"
	"\thost:$remote_addr"
	"\tforwardedfor:$http_x_forwarded_for"
	"\treq:$request"
	"\tstatus:$status"
	"\tmethod:$request_method"
	"\turi:$request_uri"
	"\tsize:$body_bytes_sent"
	"\treferer:$http_referer"
	"\tua:$http_user_agent"
	"\treqtime:$request_time"
	"\tcache:$upstream_http_x_cache"
	"\truntime:$upstream_http_x_runtime"
	"\tapptime:$upstream_response_time"
	"\tvhost:$host"; # ltsvのログフォーマット

	access_log /var/log/nginx/access.log ltsv; # アクセスログの設定

	# access_log off;　# TODO:最後にOFFにする
	# error_log off;　# TODO:最後にOFFにする

	upstream app {
		server 127.0.0.1:8080; #TODO:5000?8080?
		# server 192.100.0.1:5000;  #TODO:複数台構成に変更する
		# server 192.100.0.2:5000;
		keepalive 60;
	}
	server {
		# HTTP
		listen 80;

		# HTTPSの場合
		# listen 443 ssl http2;
		# ssl on;
		# ssl_certificate /ssl/oreore.crt;
		# ssl_certificate_key /ssl/oreore.key;
		# ssl_session_cache shared:SSL:10m;
		# ssl_session_timeout 1m; # cacheする時間。

		location / {
			proxy_pass http://app;
			proxy_set_header Host $host;
			proxy_set_header X-Real-IP $remote_addr;
			proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
			proxy_http_version 1.1;
			proxy_set_header Connection "";
		}

		location ~ \.(htm|html|css|js|jpg|png|gif|ico|eot|svg|ttf|woff|woff2)$ {
			root /home/isucon/webapp/public;
			expires max;
			add_header Cache-Control public;
		}
	}

	# TODO:inclueはコメントアウトし、直接nginx.confにコピーする。
	# include /etc/nginx/conf.d/*.conf;
	# include /etc/nginx/sites-enabled/*;
}
